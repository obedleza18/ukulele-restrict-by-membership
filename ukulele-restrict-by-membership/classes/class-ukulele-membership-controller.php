<?php

class MembershipController
{
    /**
     *  Class to control all access to content. This class is also in charge of redirecting the
     *  user to PayPal when needed. Also receives the messages sent by PayPal to validate the
     *  transactions. It also communicates to MailChimp to configure Lists, Subscribers and Segments.
     *
     *  List of Shortcodes and basic explanation:
     *    [ukulele-check-transaction]       -> Checks transaction and grants privileges after user pays.
     *    [ukulele-subscribe-button]        -> Prints the PayPal Subscribe button.
     *    [ukulele-unsubscribe-button]      -> Prints the PayPal Unsubscribe button.
     *    [ukulele-donate-button]           -> Prints the PayPal Donate button.
     *    [ukulele-logged inout="in|out"]   -> Checks if user is logged in or out.
     *    [ukulele-is-subscribed yesno="yes|no"]    -> Checks if the user is subscribed to PayPal.
     *    [ukulele-process-paypal-ipn-unsubscribe]  -> Process PayPal IPN messages.
     *
     *  Shortcodes to be used as variables after using [ukulele-check-transaction]
     *    [u-payment]       -> Returns the amount paid by the user.
     *    [u-currency]      -> Returns the currency of the payment.
     *    [u-level]         -> Returns the subscriptioin level the user paid.
     *    [u-last-visited]  -> Returns the URL of blocked content that the user last visited.
     *
     *  Things that need to be configured on WordPress, PayPal and MailChimp:
     *      1. The PDT return to website URL. The page should have the shortcode [ukulele-check-transaction]
     *      2. The PDT Token should be copied from PayPal and pasted on the Ukulele Membership Settings.
     *      3. The IPN URL so PayPal can send messages. The page should have the shortcode [ukulele-process-paypal-ipn-unsubscribe]
     *      4. The Subscribe Button. This HTML code can be automatically generated by PayPal when 
     *          selecting the options to build the button. The code needs to be copied from PayPal 
     *          and pasted on the Ukulele Membership Settings. The Membership Level options need to
     *          end in an integer number indicating the privilege. For example Level 1, Level 2, Level 3
     *          or Nivel 1, Nivel 2, Nivel 3 or asdf 1234 1, asdf 4321 2, uiop 7890 3, and so on.
     *      5. The Unsubscribe Button. This HTML code is generated by PayPal. It needs to be copied
     *          and pasted on Ukulele Membership Settings.
     *      6. The Donate Button. The HTML code is generated by PayPal. It needs to be copied and
     *          pasted just like the other butons.
     *      7. The MailChimp API should be copied from MailChimp and pasted on the Ukulele Settings.
     *      8. On WordPress, Tags should be added to Pages or Posts, Membership Access Level should
     *          be configured on the Ukulele Membership Settings and Landing Pages. For each one of
     *          this Pages, the administrator needs to create he Pages and assign the URL as Landing
     *          Page. Landing Pages should have Tags (or not) assigned with level 0.
     */

    private $options;
    private $current_user;
    private $mc_api_key;
    private $mc_data_center;
    private $mc_list_id;

    private $u_payment;
    private $u_currency;
    private $u_level;
    private $u_last_visited;

    public function __construct() {
        $this->options = get_option( 'ukulele_settings' );
        $this->current_user = wp_get_current_user();
        $this->mc_list_id = $this->ukulele_init_list_mailchimp();
        add_filter( 'the_content', array( $this, 'ukulele_restrict_content' ) );
        add_action( 'user_register', array( $this, 'ukulele_default_user_registration' ), 10, 1 );
        add_action( 'login_redirect', array( $this, 'ukulele_login_redirect' ) );
        add_shortcode( 'ukulele-check-transaction', array( $this, 'ukulele_check_transaction' ) );
        add_shortcode( 'ukulele-subscribe-button', array( $this, 'ukulele_subscribe_button' ) );
        add_shortcode( 'ukulele-unsubscribe-button', array( $this, 'ukulele_unsubscribe_button' ) );
        add_shortcode( 'ukulele-donate-button', array( $this, 'ukulele_donate_button' ) );
        add_shortcode( 'ukulele-logged', array( $this, 'ukulele_logged_in' ) );
        add_shortcode( 'ukulele-process-paypal-ipn-unsubscribe', array( $this, 'ukulele_process_paypal_ipn_unsubscribe' ) );
        add_shortcode( 'ukulele-is-subscribed', array( $this, 'ukulele_is_subscribed' ) );

        add_shortcode( 'u-payment', array( $this, 'ukulele_get_monthly_payment' ) );
        add_shortcode( 'u-currency', array( $this, 'ukulele_get_currency' ) );
        add_shortcode( 'u-level', array( $this, 'ukulele_get_level' ) );
        add_shortcode( 'u-last-visited', array( $this, 'ukulele_get_last_visited_page' ) );
    }

    /*  This inline functions are declared so we can access private variables on a Shortcode */
    public function ukulele_get_monthly_payment() { return $this->u_payment; }
    
    public function ukulele_get_currency() { return $this->u_currency; }

    public function ukulele_get_level() { return $this->u_level; }
    
    public function ukulele_get_last_visited_page( $atts ) { return '<a href="' . $this->u_last_visited . '">' . $atts['text'] . '</a>';  }

    public function ukulele_process_paypal_ipn_unsubscribe() {

        /**
         *  This function processes the IPN messages from PayPal. Right now it only processes
         *  messages when the user is unsubscribing from PayPal. In that way WordPress knows what is
         *  the status of the subscription on PayPal and can update the Membership Levels of the user
         */
        
        /*  PayPal sends an array with txn_type value */
        $action = isset( $_POST['txn_type'] ) ? $_POST['txn_type'] : '';

        if ( $action == 'subscr_cancel' ) {
            $subscription_id = isset( $_POST['subscr_id'] ) ? $_POST['subscr_id'] : '';

            if ( $subscription_id != '' ) {

                /**
                 *  If the user wants to unsubscribe and the IPN was received correctly, then we
                 *  have to locate the user by subscription_id which is saved in the user meta and
                 *  downgrade all capabilities.
                 */

                $user_query = new WP_User_Query( array( 
                    'meta_key' => 'ukulele_subscription_id',
                    'meta_value' => $subscription_id,
                    'meta_compare' => '='
                ) );

                $users = $user_query->get_results();

                if ( ! empty( $users ) ) {
                    /*  First step is to erase the Subscription ID from the user meta */
                    delete_user_meta( $users[0]->ID, 'ukulele_subscription_id' );

                    /**
                     *  Second step is to determine Membership Level to downgrade. On this line of
                     *  code we can see that no matter what is the name of the Membership Level, as
                     *  long as it ends with an integer number of the membership level, this can
                     *  be calculated by the Membership Controller System.
                     */
                    $level_array = preg_split( '/ /', $_POST['option_selection1'] );
                    $level_int = absint( $level_array[count( $level_array ) - 1] );

                    for ( $level = $level_int; $level >= 2 ; $level-- ) {
                        /*  Remove all wordpress user capabilities */
                        $users[0]->remove_cap( 'ukulele_level_' . $level );

                        /**
                         *  When the user subscribes to a membership, several segments are created
                         *  or if they exist, the user is assigned to them.
                         *  Third step is: If the user is being downgraded, then he needs to be 
                         *  removed from all the segments where he was previously subscribed on MailChimp.
                         */
                        $current_segment_id = $this->ukulele_get_segment_id( __( 'Membership Level ', 'ukulele' ) . $level );
                        $this->ukulele_unsubscribe_from_segment( $current_segment_id, $users[0]->user_email );
                    }
                }
            }
        }
    }

    public function ukulele_restrict_content( $the_content ) {

        /**
         *  This function is to program the logic of the restriction to the content. It processes
         *  and triggers the register, the login and the redirection of the user throughout the
         *  registering process.
         */

        /*  The subscriber is by default a Subscriber when it is registered on Ukulele Cheats */
        if ( in_the_loop() && (
                in_array( 'subscriber', $this->current_user->roles ) ||
                $this->current_user->ID == 0
            )
        ) {
            global $post;

            $post_id = $post->ID;

            /*  Get the current tags assigned to this Post or Page */
            $post_tags = wp_get_post_terms( $post_id, array( 'post_tag', 'page_tag' ) );

            /*  No restrictions if there are no tags */
            if ( empty( $post_tags ) )
                return $the_content;

            /** 
             *  Find most restrictive tag and level. 
             *      Process: 
             *          1. Sort by tag level in descending order
             *          2. Index the first tag (highest level -> most restrictive level [MRL])
             */
            $sort_status = usort( $post_tags, function( $a, $b ) {
                $a_level = 0;
                $b_level = 0;
                
                if ( isset( $this->options[$a->slug] ) )
                    $a_level = $this->options[$a->slug];

                if ( isset( $this->options[$b->slug] ) )
                    $b_level = $this->options[$b->slug];

                return $b_level - $a_level;

            } );

            /*  Report error if there was an issue when ordering the restriction levels */
            if ( ! $sort_status )
                return __( 'Content can\'t be accessed by a problem on the server. Please contact the Administrator of the website if you are having this error. Thanks for your patience.', 'ukulele' );

            /**
             *  Check the database of Settings to determine what is the access level of the current
             *  most restrictive level. Get the level integer value, the name and the landing page.
             */
            $most_restrictive_level = isset( $this->options[$post_tags[0]->slug] ) ?
                $this->options[$post_tags[0]->slug] : 0;
            $most_restrictive_name = isset( $post_tags[0]->name ) ? $post_tags[0]->name : '';
            $most_restrictive_landing_page = isset( $this->options[$post_tags[0]->slug . '-lp'] ) ?
                $this->options[$post_tags[0]->slug . '-lp'] : '';
            
            /**
             *  For pages without memebrship level assigned, the most restrictive level will be 0
             *  which can be accessible for all users.
             */
            if ( $most_restrictive_level == 0 )
                return $the_content;

            if ( ! current_user_can( 'ukulele_level_' . $most_restrictive_level ) ) {
                if ( $most_restrictive_landing_page != '' ) {

                    /*  Redirect the user to the respective landing page for the MRL */
                    if ( wp_redirect( $most_restrictive_landing_page ) ) {
                        $_SESSION['ukulele_last_visited'] = get_permalink();
                        $_SESSION['ukulele_last_visited_name'] = $most_restrictive_name;
                        exit;
                    }
                }
                return __( 'You are not allowed to see this content. Please subscribe to a membership.', 'ukulele' );
            }
        }

        /*  For roles other than Subscriber, this logic does not matter. Show the content */
        return $the_content;
    }

    public function ukulele_default_user_registration( $user_id ) {

        /**
         *  This function sets the capabilities for the default WordPress user registration. At this
         *  moment, the user is being subscribed also to MailChimp.
         */

        /*  Default capabilities are ukulele_level_0 and ukulele_level_1 for registered users */
        $user = new WP_User( $user_id );
        $user->add_cap( 'ukulele_level_0' );
        $user->add_cap( 'ukulele_level_1' );

        $user_data = get_userdata( $user_id );

        /**
         *  Every user that is initially subscribed to a MailChimp list, should be subscribed and
         *  the email should be assigned to 2 different segments: The Membership Level by default
         *  which is 1 and the Content Category that he wanted to see last time he wanted to access
         *  Membership Restricted Content.
         */
        $this->ukulele_mailchimp_subscribe(
            $user->user_email,
            $user_data->first_name, 
            $user_data->last_name, 
            __( 'Membership Level ', 'ukulele' ) . '1',
            isset( $_SESSION['ukulele_last_visited_name'] ) ? $_SESSION['ukulele_last_visited_name'] : ''
        );
    }

    public function ukulele_check_transaction() {

        /**
         *  This function processes the transaction status after the user has paid on PayPal.
         *  Actually the page where this ShortCode is has to be configured as the one that processes
         *  the PDT which is message that will be sent by PayPal after the transaction is completed
         *  and the user is redirected to the website. This setting (PDT URL) is configured on PayPal.
         */

        $options = get_option( 'ukulele_settings' );

        $paypal_debug = isset( $options['ukulele-debug'] ) ? true : false;
        $pdt_token = $options['ukulele-pdt-token'];

        /*  The PDT token has to be configured on the Ukulele Settings Page */
        if ( $pdt_token == '' )
            return __( 'Incorrect server configuration. Please contact the administrator', 'ukulele' );

        $http_get_response = $_GET;

        /*  To proceed to grant privileges, the transaction has to be completed */
        if ( $http_get_response['st'] != 'Completed' )
            return __( 'Payment not completed correctly, please contact the website Administrator for more information.', 'ukulele' );

        $url = 'https://www' . ( $paypal_debug ? '.sandbox' : '' ) . '.paypal.com/cgi-bin/webscr';

        /**
         *  If everything is correct so far, then the system will take the parameter tx which is the
         *  transaction numebr and will request information to PayPal to verify its status.
         */
        $http_post_request = wp_remote_post( 
            $url, 
            array(
                'method' => 'POST',
                'timeout' => 45,
                'redirection' => 5,
                'httpversion' => '1.0',
                'blocking' => true,
                'headers' => array(),
                'body' => array( 
                    'cmd' => '_notify-synch', 
                    'tx' => $_GET['tx'], 
                    'at' => $pdt_token 
                ),
                'cookies' => array()
            )
        );
        $http_post_response_encoded = wp_remote_retrieve_body( $http_post_request );

        $http_post_response = $this->ukulele_decode_from_paypal( $http_post_response_encoded );

        /*  For the system to continue to grant privileges, PayPal should respond with SUCCESS */
        if ( $http_post_response['transaction_result'] != 'SUCCESS' )
            return __( 'Transaction unsuccessful. Contact the website Administrator for more information.', 'ukulele' );

        /**
         *  If everything is OK, then we proceed to get the current user and grant all the privileges
         *  which are WordPress User Capabilities as well as MailChimp Subscription to segments.
         */
        $current_user = wp_get_current_user();

        $level_array = preg_split( '/ /', $http_post_response['option_selection1'] );
        $level_int = absint( $level_array[count( $level_array ) - 1] );

        /*  This variables are ready to use as ShortCodes. They should be used after this Shortcode */
        $this->u_payment = $http_post_response['payment_gross'];
        $this->u_currency = $http_post_response['mc_currency'];
        $this->u_level = $http_post_response['option_selection1'];
        $this->u_last_visited = $_SESSION['ukulele_last_visited'];

        /*  Assign capabilities depending on the level the user subscribed on PayPal */
        for ( $level = $level_int; $level >= 2 ; $level-- ) { 
            $current_user->add_cap( 'ukulele_level_' . $level );

            /* Subscribe to MailChimp Segments */
            $current_segment_id = $this->ukulele_get_segment_id( __( 'Membership Level ', 'ukulele' ) . $level );
            $this->ukulele_subscribe_to_segment( $current_segment_id, $current_user->user_email );
        }

        /*  This is where the system assigns a subscription ID that comes from PayPal */
        add_user_meta( $current_user->ID, 'ukulele_subscription_id', $http_post_response['subscr_id'] );

        /**
         *  This Shortcode does not generate HTML. This is only to validate the transaction,
         *  assign capabilities, subscribe to MailChimp segments and enable transaction variables
         *  so the administrator can use it for creating the After Purchase Page
         */
        return '';
    }

    public function ukulele_subscribe_button( $atts ) {

        /**
         *  This function checks the database for the current PayPal Subscribe button configured and
         *  displays it wherever this shortcode is. Additionally, the parameter "option" can be set
         *  to automatically select which option from the dropdown the administrator wants to show 
         *  by default.
         */

        $attributes = shortcode_atts( array( 'option' => 1 ), $atts );

        $options = get_option( 'ukulele_settings' );

        if ( ! isset( $options['ukulele-subscribe-button'] ) )
            return __( 'There is an error on the configuration of the server. Contact the Administrator' ) . ' 101';

        return $options['ukulele-subscribe-button'] . '<script>jQuery( "form select option:nth-child(' . $attributes['option'] . ')" ).attr( "selected", "selected" );</script>';
    }

    public function ukulele_unsubscribe_button() {

        /**
         *  This function performs a similar function than the previous function but for the
         *  unsubscribe button.
         */

        $options = get_option( 'ukulele_settings' );

        if ( ! isset( $options['ukulele-unsubscribe-button'] ) )
            return __( 'There is an error on the configuration of the server. Contact the Administrator' ) . ' 102';

        return $options['ukulele-unsubscribe-button'];
    }

    public function ukulele_donate_button() {

        /**
         *  This function performs a similar function than the previous 2 functions but for the
         *  donate button.
         */

        $options = get_option( 'ukulele_settings' );

        if ( ! isset( $options['ukulele-donate-button'] ) )
            return __( 'There is an error on the configuration of the server. Contact the Administrator' ) . ' 103';

        return $options['ukulele-donate-button'];
    }

    public function ukulele_login_redirect() {

        /**
         *  This function redirects the user after login to the last visited page that was restricted
         *  for the user. Sometimes, this will redirect to another restricted page and will ask the
         *  client to subscribe to a paid membership.
         */

        return isset( $_SESSION['ukulele_last_visited'] ) ? $_SESSION['ukulele_last_visited'] : get_site_url();
    }

    public function ukulele_logged_in( $atts, $content ) {

        $attributes = shortcode_atts( array( 'inout' => '' ), $atts );

        /**
         *  Simple function that adds a shortcode to validate if the user is logged in or out. If 
         *  the conditions match the desired functionality, it displays the content that is inside 
         *  them, which might be more shortcodes.
         */

        if ( $attributes['inout'] == 'in' ) {
            if ( wp_get_current_user()->ID != 0 ) {
                return do_shortcode( $content, false );
            }
        }
        else {
            if ( wp_get_current_user()->ID == 0 ) {
                return do_shortcode( $content, false );
            }
        }
        return '';
    }

    public function ukulele_is_subscribed( $atts, $content ) {

        /**
         *  Basic function to determine if the user is subscribed to PayPal or not. If the conditions
         *  match the desired functionality, it displays the content that is inside them, which
         *  might be more shortcodes.
         */

        $attributes = shortcode_atts( array( 'yesno' => '' ), $atts );

        $user = wp_get_current_user();
        $subscription_id = get_user_meta( $user->ID, 'ukulele_subscription_id' );
        $is_subscribed = false;

        if ( isset( $subscription_id ) ) {
            if ( $subscription_id[0] != '' ) {
                $is_subscribed = true;
            }
        }

        if ( $attributes['yesno'] == 'yes' ) {
            if ( $is_subscribed ) {
                return do_shortcode( $content, false );
            }
        }
        else {
            if ( ! $is_subscribed ) {
                return do_shortcode( $content, false );
            }
        }

        return '';
    }

    private function ukulele_decode_from_paypal( $post_response ) {

        /**
         *  Simple private function to decode the response from PayPal. It receives a string URL
         *  compatible from PayPal and returns a PHP array not friendly with URL but UTF-8 friendly.
         */

        $splitted_response = preg_split( '/\n/', $post_response );
        $decoded_response = array();

        $index = 0;
        foreach ($splitted_response as $key_value) {
            if ( $index++ == 0 ) {
                $decoded_response['transaction_result'] = $key_value;
            }
            else {
                list( $key, $value ) = preg_split( '/=/', urldecode( $key_value ) );
                $decoded_response[$key] = $value;
            }
        }

        return $decoded_response;
    }

    private function ukulele_init_list_mailchimp() {

        /**
         *  This function connects to MailChimp and creates a List. If the list already exists, then
         *  it does not create it. The function returns the MailChimp list ID.
         */

        $options = get_option( 'ukulele_settings' );

        $mc_api_key = $options['ukulele-mc-api-key'];

        if ( $mc_api_key == '' )
            return __( 'There is an error on the configuration of the server. Contact the Administrator' ) . ' 104';

        /*  Generates the Data Center needed by MailChimp */
        $data_center = substr( $mc_api_key, strpos( $mc_api_key, '-' ) + 1 );

        $this->mc_api_key = $mc_api_key;
        $this->mc_data_center = $data_center;

        /*  Setting the MailChimp API on the headers of the WordPress GET REQUEST */
        $get_lists_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $mc_api_key )
            )
        );

        $http_get_request = wp_remote_get( 'https://' . $data_center . '.api.mailchimp.com/3.0/lists', $get_lists_args );

        $http_get_response = json_decode( wp_remote_retrieve_body( $http_get_request ), true );

        /*  If the response is in worng format, cancel the operation */
        if ( ! isset( $http_get_response['lists'] ) )
            return __( 'There is an error on the configuration of the server. Contact the Administrator' ) . ' 105';

        $list_id = '';

        /*  If MailChimp already has lists, check all of them and see it one matches */
        for ( $index = 0; $index < count( $http_get_response['lists'] ); $index++ ) {
            if ( $http_get_response['lists'][$index]['name'] == __( 'Subscribers', 'ukulele' ) ) {
                $list_id = $http_get_response['lists'][$index]['id'];
                break;
            }
        }

        /*  If there is no list that matches the list name, create one */
        if ( $list_id == '' ) {
            $create_list_args = array(
                'headers' => array(
                    'Authorization' => 'Basic ' . base64_encode( 'user:'. $mc_api_key )
                ),
                'body' => json_encode( array(
                    'name'      => __( 'Subscribers', 'ukulele' ),
                    'contact'   => array(
                        'company'   => '',
                        'address1'  => '',
                        'city'      => '',
                        'state'     => '',
                        'zip'       => '',
                        'country'   => ''
                    ),
                    'permission_reminder'   => __( 'You\'re receiving this email because you signed up on ukulelecheats.com', 'ukulele' ),
                    'campaign_defaults'     => array(
                        'from_name'     => __( 'Ukulele Cheats', 'ukulele' ),
                        'from_email'    => get_option( 'admin_email' ),
                        'subject'       => __( 'News About Ukulele Cheats', 'ukulele' ),
                        'language'      => 'en'
                    ),
                    'email_type_option'     => false
                ) )
            );

            $http_create_list_action = wp_remote_post( 'https://' . $data_center . '.api.mailchimp.com/3.0/lists', $create_list_args );

            $http_create_list_response = json_decode( wp_remote_retrieve_body( $http_create_list_action ), true );

            $list_id = $http_create_list_response['id'];
        }

        /*  Return the List ID from MailChimp */
        return $list_id;
    }

    private function ukulele_mailchimp_subscribe( $email, $first_name, $last_name, $membership_level, $origin_content_category ) {

        /**
         *  This private function subscribes a user to MailChimp. As it can be seen on the parameters
         *  this function receives information about the user and the content category that he
         *  originally wanted to see.
         */

        $subscribe_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
            ),
            'body' => json_encode( array(
                'email_address' => $email,
                'status'        => 'subscribed',
                'merge_fields'  => array(
                    'FNAME' => $first_name,
                    'LNAME' => $last_name 
                )
            ) )
        );

        $http_subscribe_action = wp_remote_post( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/members', $subscribe_args );

        $http_subscribe_response = json_decode( wp_remote_retrieve_body( $http_subscribe_action ), true );

        /*  If there is no member ID, something went wrong */
        if ( ! isset( $http_subscribe_response['id'] ) ) {
            if ( ! isset( $http_subscribe_response['title'] ) ) {
                error_log( print_r( $http_subscribe_response, true ) );
                return false;
            }
        }

        /*  After user has been subscribed to a list, then add the user to other segments */
        $segment_id_origin_content = $this->ukulele_get_segment_id( $origin_content_category );
        $segment_id_membership_level = $this->ukulele_get_segment_id( $membership_level );

        $add_to_segment_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
            ),
            'body' => json_encode( array(
                'email_address' => $email
            ) )
        );

        if ( $segment_id_origin_content != false ) {
            $http_add_to_segment_origin_action = wp_remote_post( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments/' . $segment_id_origin_content . '/members', $add_to_segment_args );
        }

        if ( $segment_id_membership_level != false ) {
            $http_add_to_segment_level_action = wp_remote_post( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments/' . $segment_id_membership_level . '/members', $add_to_segment_args );
        }
    }

    private function ukulele_get_segment_id( $segment_name ) {

        /**
         *  This private function performs a get request to MailChimp to see the segments that are
         *  added to the List. If the segment exists then return the segment ID. If the segment does
         *  not exist, it is created and then returns its ID. The function receives the segment name
         *  and performs the checkup.
         */

        if ( $segment_name == '' )
            return false;

        $segments_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
            )
        );

        $http_segments_action = wp_remote_get( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments', $segments_args );

        $http_segments_response = json_decode( wp_remote_retrieve_body( $http_segments_action ), true );

        /*  If no segment parameter is set something went wrong with the request */
        if ( ! isset( $http_segments_response['segments'] ) ) 
            return false;

        $segment_id = '';

        /*  Performs the brute force search for the segment */
        for ( $index = 0; $index < count( $http_segments_response['segments'] ); $index++ ) { 
            if ( $http_segments_response['segments'][$index]['name'] == $segment_name ) {
                $segment_id = $http_segments_response['segments'][$index]['id'];
                break;
            }
        }

        /*  If no segment found, create it */
        if ( $segment_id == '' ) {
            $create_segment_args = array(
                'headers' => array(
                    'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
                ),
                'body' => json_encode( array(
                    'name'              => $segment_name,
                    'static_segment'    => array()
                ) )
            );

            $http_create_segment_action = wp_remote_post( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments', $create_segment_args );

            $http_create_segment_response = json_decode( wp_remote_retrieve_body( $http_create_segment_action ), true );

            return $http_create_segment_response['id'];
        }

        return $segment_id;
    }

    private function ukulele_subscribe_to_segment( $segment_id, $email ) {

        /**
         *  This private function takes a segment ID and a user email. It performs a post request
         *  to MailChimp and subscribes a user to a given segment.
         */

        $add_to_segment_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
            ),
            'body' => json_encode( array(
                'email_address' => $email
            ) )
        );

        $http_add_to_segment_action = wp_remote_post( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments/' . $segment_id . '/members', $add_to_segment_args );
    }

    private function ukulele_unsubscribe_from_segment( $segment_id, $email ) {

        /**
         *  Similar function than the previous one but unsubscribes users from segment.
         */

        $md5_lowercase_email = md5( strtolower( $email ) );

        $remove_from_segment_args = array(
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( 'user:'. $this->mc_api_key )
            ),
            'method' => 'DELETE'
        );

        $http_remove_from_segment_action = wp_remote_request( 'https://' . $this->mc_data_center . '.api.mailchimp.com/3.0/lists/' . $this->mc_list_id . '/segments/' . $segment_id . '/members/' . $md5_lowercase_email, $remove_from_segment_args );

        error_log( print_r( $http_remove_from_segment_action, true ) );
    }
}


$membership_controller = new MembershipController();





















